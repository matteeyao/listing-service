package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"
	
	database "github.com/matteeyao/listing-service/db"
	model1 "github.com/matteeyao/listing-service/graph/model"
)

var (
	db = database.ConnectDB()
)

// CreateListing is the resolver for the createListing field.
func (r *mutationResolver) CreateListing(ctx context.Context, input model1.NewListing) (*model1.Listing, error) {
	project, err := db.CreateListing(&input)
	return project, err
}

// CreateOwner is the resolver for the createOwner field.
func (r *mutationResolver) CreateOwner(ctx context.Context, input model1.NewOwner) (*model1.Owner, error) {
	owner, err := db.CreateOwner(&input)
	return owner, err
}

// Owners is the resolver for the owners field.
func (r *queryResolver) Owners(ctx context.Context) ([]*model1.Owner, error) {
	owners, err := db.GetOwners()
	return owners, err
}

// Listings is the resolver for the listings field.
func (r *queryResolver) Listings(ctx context.Context) ([]*model1.Listing, error) {
	listings, err := db.GetListings()
	return listings, err
}

// Owner is the resolver for the owner field.
func (r *queryResolver) Owner(ctx context.Context, input *model1.FetchOwner) (*model1.Owner, error) {
	owner, err := db.GetOwner(input.ID)
	return owner, err
}

// Listing is the resolver for the listing field.
func (r *queryResolver) Listing(ctx context.Context, input *model1.FetchListing) (*model1.Listing, error) {
	listing, err := db.GetListing(input.ID)
	return listing, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
